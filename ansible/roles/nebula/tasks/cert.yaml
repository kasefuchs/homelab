---
- name: Create directories
  loop:
    - "{{ nebula_cert_ca_local_dir }}"
    - "{{ nebula_cert_entity_local_dir }}"
    - "{{ nebula_cert_entity_host_local_dir }}"
  ansible.builtin.file:
    path: "{{ item }}"
    mode: "0700"
    state: directory

- name: Stat CA certificate encrypted key
  run_once: true
  register: nebula_cert_ca_key_encrypted_stat_result
  ansible.builtin.stat:
    path: "{{ nebula_cert_ca_key_encrypted_local_path }}"

- name: Create CA certificate
  when: not nebula_cert_ca_key_encrypted_stat_result.stat.exists
  run_once: true
  block:
    - name: Create temporary directory
      register: nebula_cert_ca_tempfile
      ansible.builtin.tempfile:
        state: directory

    - name: Create CA certificate
      changed_when: true
      ansible.builtin.command:
        argv:
          - nebula-cert
          - ca
          - "-ips={{ nebula_cert_ca_ips | join(',') }}"
          - "-name={{ nebula_cert_ca_cn }}"
          - "-groups={{ nebula_cert_ca_groups | join(',') }}"
          - "-subnets={{ nebula_cert_ca_subnets | join(',') }}"
          - "-duration={{ nebula_cert_ca_duration }}"
          - "-out-crt={{ nebula_cert_ca_crt_local_path }}"
          - "-out-key={{ (nebula_cert_ca_tempfile.path, 'nebula.key') | ansible.builtin.path_join }}"

    - name: Read CA key
      register: nebula_cert_ca_key
      ansible.builtin.slurp:
        src: "{{ (nebula_cert_ca_tempfile.path, 'nebula.key') | ansible.builtin.path_join }}"

    - name: Encrypt CA certificate key
      community.sops.sops_encrypt:
        path: "{{ nebula_cert_ca_key_encrypted_local_path }}"
        content_binary: "{{ nebula_cert_ca_key.content }}"

    - name: Delete temporary directory
      ansible.builtin.file:
        path: "{{ nebula_cert_ca_tempfile.path }}"
        state: absent

- name: Stat entity certificate encrypted key
  register: nebula_cert_entity_key_encrypted_stat_result
  ansible.builtin.stat:
    path: "{{ nebula_cert_entity_key_encrypted_local_path }}"

- name: Create entity certificates
  when: not nebula_cert_entity_key_encrypted_stat_result.stat.exists
  block:
    - name: Create temporary directory
      register: nebula_cert_entity_tempfile
      ansible.builtin.tempfile:
        state: directory

    - name: Decrypt CA key
      ansible.builtin.copy:
        content: "{{ lookup('community.sops.sops', nebula_cert_ca_key_encrypted_local_path) }}"
        dest: "{{ (nebula_cert_entity_tempfile.path, 'nebula.key') | ansible.builtin.path_join }}"
        mode: "0600"

    - name: Create host certificate
      changed_when: true
      ansible.builtin.command:
        argv:
          - nebula-cert
          - sign
          - "-ip={{ nebula_cert_host_ip }}"
          - "-name={{ nebula_cert_host_cn }}"
          - "-subnets={{ nebula_cert_host_subnets | join(',') }}"
          - "-ca-crt={{ nebula_cert_ca_crt_local_path }}"
          - "-ca-key={{ (nebula_cert_entity_tempfile.path, 'nebula.key') | ansible.builtin.path_join }}"
          - "-out-crt={{ nebula_cert_entity_crt_local_path }}"
          - "-out-key={{ (nebula_cert_entity_tempfile.path, inventory_hostname ~ '.key') | ansible.builtin.path_join }}"

    - name: Read entity key
      register: nebula_cert_entity_key
      ansible.builtin.slurp:
        src: "{{ (nebula_cert_entity_tempfile.path, inventory_hostname ~ '.key') | ansible.builtin.path_join }}"

    - name: Encrypt CA certificate key
      community.sops.sops_encrypt:
        path: "{{ nebula_cert_entity_key_encrypted_local_path }}"
        content_binary: "{{ nebula_cert_entity_key.content }}"

    - name: Delete temporary directory
      ansible.builtin.file:
        path: "{{ nebula_cert_entity_tempfile.path }}"
        state: absent
