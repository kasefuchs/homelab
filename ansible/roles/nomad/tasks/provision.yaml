---
- name: Include vars
  run_once: true
  failed_when: false
  ansible.builtin.set_fact:
    nomad_vault_server_provision_data: "{{ lookup('community.sops.sops', vault_server_provision_encrypted_local_file) | ansible.builtin.from_json }}"
    nomad_vault_server_init_data: "{{ lookup('community.sops.sops', vault_server_init_encrypted_local_file) | ansible.builtin.from_json }}"
    nomad_consul_bootstrap_data: "{{ lookup('community.sops.sops', consul_bootstrap_encrypted_local_file) | ansible.builtin.from_json }}"
    nomad_bootstrap_data: "{{ lookup('community.sops.sops', nomad_bootstrap_encrypted_local_file) | ansible.builtin.from_json }}"

- name: Ensure Nomad provision directory exists
  ansible.builtin.file:
    path: "{{ nomad_provision_local_dir }}"
    state: directory
    mode: "0700"

- name: Provision Nomad
  register: nomad_provision_result
  environment:
    VAULT_ADDR: "{{ nomad_local_vault_address }}"
    VAULT_TOKEN: "{{ nomad_local_vault_token }}"
    VAULT_CACERT: "{{ (vault_server_cert_ca_local_dir, 'server.crt') | ansible.builtin.path_join }}"
    CONSUL_HTTP_ADDR: "{{ nomad_local_consul_address }}"
    CONSUL_HTTP_TOKEN: "{{ nomad_local_consul_token }}"
    CONSUL_CACERT: "{{ (vault_server_cert_ca_local_dir, 'cluster.crt') | ansible.builtin.path_join }}"
    NOMAD_ADDR: "{{ nomad_local_address }}"
    NOMAD_TOKEN: "{{ nomad_local_token }}"
    NOMAD_CACERT: "{{ (vault_server_cert_ca_local_dir, 'cluster.crt') | ansible.builtin.path_join }}"
  community.general.terraform:
    project_path: "{{ nomad_provision_terraform_local_dir }}"
    workspace: "{{ common_inventory_name }}"
    force_init: true
    variables:
      vault_pki_cluster_ca_certificate: "{{ nomad_vault_server_provision_data.vault_pki_cluster_ca_certificate.value }}"

- name: Render Nomad provision result to local JSON file
  community.sops.sops_encrypt:
    path: "{{ nomad_provision_encrypted_local_file }}"
    content_json: "{{ nomad_provision_result.outputs }}"
