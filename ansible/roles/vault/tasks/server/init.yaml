---
- name: Ensure Vault initialization directory exists
  ansible.builtin.file:
    path: "{{ vault_server_init_local_dir }}"
    state: directory
    mode: "0700"

- name: Get and parse Vault server status
  block:
    - name: Get Vault server status
      register: vault_server_init_status_result
      failed_when: vault_server_init_status_result.rc == 1
      changed_when: false
      environment:
        VAULT_ADDR: "{{ vault_server_local_address }}"
        VAULT_CACERT: "{{ (vault_server_cert_ca_local_dir, 'server.crt') | ansible.builtin.path_join }}"
      ansible.builtin.command:
        cmd: vault status -format=json

    - name: Parse Vault server status JSON
      when: vault_server_init_status_result.stdout is defined
      ansible.builtin.set_fact:
        vault_server_init_status_json: "{{ vault_server_init_status_result.stdout | ansible.builtin.from_json }}"

- name: Initialize Vault server if not yet initialized
  when: not vault_server_init_status_json.initialized
  run_once: true
  block:
    - name: Run Vault operator init command
      register: vault_server_init_result
      changed_when: vault_server_init_result.rc != 0
      environment:
        VAULT_ADDR: "{{ vault_server_local_address }}"
        VAULT_CACERT: "{{ (vault_server_cert_ca_local_dir, 'server.crt') | ansible.builtin.path_join }}"
      ansible.builtin.command:
        argv:
          - vault
          - operator
          - init
          - -format=json
          - "-key-shares={{ vault_server_init_key_shares }}"
          - "-key-threshold={{ vault_server_init_key_threshold }}"

    - name: Render Vault init output to local JSON file
      when: vault_server_init_result.stdout is defined
      community.sops.sops_encrypt:
        path: "{{ vault_server_init_encrypted_local_file }}"
        content_json: "{{ vault_server_init_result.stdout | ansible.builtin.from_json }}"
