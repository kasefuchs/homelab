---
- name: Generate Vault certificates
  vars:
    ansible_become: false
  delegate_to: localhost
  block:
    - name: Generate Vault CA
      run_once: true
      block:
        - name: Create Vault CA private key
          community.crypto.openssl_privatekey:
            path: "{{ role_path }}/files/certificates/vault-ca.key"
          register: ca_private_key

        - name: Create Vault CA certificate signing request
          community.crypto.openssl_csr:
            path: "{{ role_path }}/files/certificates/vault-ca.csr"
            privatekey_path: "{{ ca_private_key.filename }}"
            common_name: Vault CA
            use_common_name_for_san: false
            basic_constraints:
              - CA:TRUE
            basic_constraints_critical: true
            key_usage:
              - keyCertSign
            key_usage_critical: true
          register: ca_csr

        - name: Create self-signed CA certificate from CSR
          community.crypto.x509_certificate:
            path: "{{ role_path }}/files/certificates/vault-ca.pem"
            csr_path: "{{ ca_csr.filename }}"
            privatekey_path: "{{ ca_private_key.filename }}"
            provider: selfsigned
            ownca_not_after: "+3650d"
            ownca_not_before: "-1d"
          register: ca_certificate

    - name: Create Vault certificate store
      vars:
        ansible_become: false
      delegate_to: localhost
      ansible.builtin.file:
        mode: "0755"
        path: "{{ role_path }}/files/certificates/{{ ansible_hostname }}"
        state: directory

    - name: Generate Vault client certificate
      run_once: true
      block:
        - name: Create Vault client private key
          community.crypto.openssl_privatekey:
            path: "{{ role_path }}/files/certificates/vault-client.key"
          register: client_private_key

        - name: Create Vault certificate signing request
          community.crypto.openssl_csr:
            path: "{{ role_path }}/files/certificates/vault-client.csr"
            privatekey_path: "{{ client_private_key.filename }}"
            common_name: vault.client
            subject_alt_name:
              # Local
              - IP:127.0.0.1
              - DNS:localhost
            extended_key_usage:
              - serverAuth
              - clientAuth
          register: client_csr

        - name: Sign Vault client certificate
          community.crypto.x509_certificate:
            path: "{{ role_path }}/files/certificates/vault-client.pem"
            provider: ownca
            csr_path: "{{ client_csr.filename }}"
            ownca_path: "{{ ca_certificate.filename }}"
            ownca_privatekey_path: "{{ ca_private_key.filename }}"
            ownca_not_after: "+1825d"
            ownca_not_before: "-1d"

    - name: Generate Vault proxy certificates
      block:
        - name: Create Vault proxy private key
          community.crypto.openssl_privatekey:
            path: "{{ role_path }}/files/certificates/{{ ansible_hostname }}/vault-proxy.key"
          register: proxy_private_key

        - name: Create Vault proxy certificate signing request
          community.crypto.openssl_csr:
            path: "{{ role_path }}/files/certificates/{{ ansible_hostname }}/vault-proxy.csr"
            privatekey_path: "{{ proxy_private_key.filename }}"
            common_name: vault.proxy
            subject_alt_name:
              # Local
              - IP:127.0.0.1
              - DNS:localhost
              # Node
              - "IP:{{ nebula_ip | ansible.utils.ipaddr('address') }}"
              - "DNS:{{ ansible_hostname }}.proxy.vault"
            extended_key_usage:
              - serverAuth
              - clientAuth
          register: proxy_csr

        - name: Sign Vault proxy certificate
          community.crypto.x509_certificate:
            path: "{{ role_path }}/files/certificates/{{ ansible_hostname }}/vault-proxy.pem"
            provider: ownca
            csr_path: "{{ proxy_csr.filename }}"
            ownca_path: "{{ ca_certificate.filename }}"
            ownca_privatekey_path: "{{ ca_private_key.filename }}"
            ownca_not_after: "+1825d"
            ownca_not_before: "-1d"

    - name: Generate Vault server certificates
      when: vault_server | bool
      block:
        - name: Create Vault server private key
          community.crypto.openssl_privatekey:
            path: "{{ role_path }}/files/certificates/{{ ansible_hostname }}/vault-server.key"
          register: server_private_key

        - name: Create Vault server certificate signing request
          community.crypto.openssl_csr:
            path: "{{ role_path }}/files/certificates/{{ ansible_hostname }}/vault-server.csr"
            privatekey_path: "{{ server_private_key.filename }}"
            common_name: vault.server
            subject_alt_name:
              # Local
              - IP:127.0.0.1
              - DNS:localhost
              # Consul
              - DNS:vault.service.consul
              - DNS:active.vault.service.consul
              - DNS:standby.vault.service.consul
              # Node
              - "IP:{{ nebula_ip | ansible.utils.ipaddr('address') }}"
              - "DNS:{{ ansible_hostname }}.server.vault"
            extended_key_usage:
              - serverAuth
              - clientAuth
          register: server_csr

        - name: Sign Vault server certificate
          community.crypto.x509_certificate:
            path: "{{ role_path }}/files/certificates/{{ ansible_hostname }}/vault-server.pem"
            provider: ownca
            csr_path: "{{ server_csr.filename }}"
            ownca_path: "{{ ca_certificate.filename }}"
            ownca_privatekey_path: "{{ ca_private_key.filename }}"
            ownca_not_after: "+1825d"
            ownca_not_before: "-1d"

- name: Copy Vault certificates
  block:
    - name: Create Vault certificates directory
      ansible.builtin.file:
        path: /etc/vault.d/certificates
        state: directory
        mode: "0755"
        owner: vault
        group: vault

    - name: Copy Vault public Certification Authority
      ansible.builtin.copy:
        src: "{{ role_path }}/files/certificates/vault-ca.pem"
        dest: /etc/vault.d/certificates/ca.pem
        mode: "0644"
        owner: vault
        group: vault

    - name: Copy Vault client certificates
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "0644"
        owner: vault
        group: vault
      loop:
        - src: "{{ role_path }}/files/certificates/vault-client.pem"
          dest: /etc/vault.d/certificates/client.pem
          name: Public Key
        - src: "{{ role_path }}/files/certificates/vault-client.key"
          dest: /etc/vault.d/certificates/client.key
          name: Private Key
      loop_control:
        label: "{{ item.name }}"

    - name: Copy Vault proxy certificates
      ansible.builtin.copy:
        src: "{{ item.src }}"
        mode: "{{ item.mode }}"
        dest: "{{ item.dest }}"
        owner: vault
        group: vault
      loop:
        - src: "{{ role_path }}/files/certificates/{{ ansible_hostname }}/vault-proxy.pem"
          dest: /etc/vault.d/certificates/proxy.pem
          mode: "0644"
          name: Public Key
        - src: "{{ role_path }}/files/certificates/{{ ansible_hostname }}/vault-proxy.key"
          dest: /etc/vault.d/certificates/proxy.key
          mode: "0600"
          name: Private Key
      loop_control:
        label: "{{ item.name }}"

    - name: Copy Vault server certificates
      when: vault_server | bool
      ansible.builtin.copy:
        src: "{{ item.src }}"
        mode: "{{ item.mode }}"
        dest: "{{ item.dest }}"
        owner: vault
        group: vault
      loop:
        - src: "{{ role_path }}/files/certificates/{{ ansible_hostname }}/vault-server.pem"
          dest: /etc/vault.d/certificates/server.pem
          mode: "0644"
          name: Public Key
        - src: "{{ role_path }}/files/certificates/{{ ansible_hostname }}/vault-server.key"
          dest: /etc/vault.d/certificates/server.key
          mode: "0600"
          name: Private Key
      loop_control:
        label: "{{ item.name }}"
